type Query {
  legosetPriceTrend: [setPriceTrend]
    #LegosetPriceTrend.js
    @cypher(
      statement: """
      MATCH (n:Set)
      WHERE EXISTS(n.year) and EXISTS(n.USD_MSRP)
      WITH n.year AS year, AVG(n.USD_MSRP) AS average
      RETURN {year: year, USD_average: average} as Obj
      ORDER BY year DESC
      """
    )

  averagePartsPerYear: [YearWisePartsAverage]
    #AveragePartsPerYear.js
    @cypher(
      statement: """
      MATCH (n:Set)
      WHERE EXISTS(n.num_parts)
      WITH n.year AS year, AVG(n.num_parts) AS average
      RETURN {year: year, average: average} as Obj
      ORDER BY year DESC
      """
    )

  setCount: Int
    #SetCount.js
    @cypher(statement: "MATCH (n:Set) RETURN COUNT(DISTINCT(n.set_num))")

  themeCount: Int
    #ThemeCount.js
    @cypher(statement: "MATCH (t:Theme) RETURN COUNT(DISTINCT(t.id))")

  themesReleasedTrend: [YearwiseThemeCount]
    #ThemesReleasedTrend.js
    @cypher(
      statement: """
      MATCH (n:Set)-[:HAS_THEME]->(t:Theme)
      WHERE EXISTS (n.year)
      WITH n.year AS year, COUNT(DISTINCT(t.id)) AS themeCount
      RETURN {year: year, themeCount: themeCount} as Obj
      ORDER BY year DESC
      """
    )

  partsPerSetPerTheme: [setPartsPerTheme]
    #PartsPerSetPerTheme.js
    @cypher(
      statement: """
      MATCH (s:Set)-[:HAS_THEME]->(t:Theme)
      WHERE EXISTS(s.name)
      WITH s.name as setname, t.name as theme, SUM(s.num_parts) as num_parts
      RETURN {setname: setname, theme: theme, num_parts: num_parts} AS Obj
      ORDER BY num_parts DESC
      """
    )

  topThemesBasedOnPrice: [ThemePrice]
    #TopThemesBasedOnPrice.js
    @cypher(
      statement: """
      MATCH (n:Set)-[:HAS_THEME]->(t:Theme)
      WHERE EXISTS(t.name) AND EXISTS(n.USD_MSRP)
      WITH t.name AS theme, AVG(n.USD_MSRP) AS average
      RETURN {theme: theme, USD_average: average} as Obj
      ORDER BY average DESC
      """
    )

  topThemesBasedOnSetCount: [topThemes]
    #TopThemesBasedOnSetCount.js
    @cypher(
      statement: """
      MATCH (s:Set)-[:HAS_THEME]->(t:Theme)
      WITH t.name as name, COUNT(s.set_num) as count
      RETURN {name: name, count: count} AS Obj
      ORDER BY count DESC
      LIMIT 15
      """
    )

  uniquePartsPerColor: [PartsPerColor]
    #UniquePartsPerColor.js
    @cypher(
      statement: """
      MATCH (i:InventoryPart)-[:FOR_PART]->(p:Part)
      MATCH (i:InventoryPart)-[:HAS_COLOR]->(c:Color)
      WHERE EXISTS (p.part_num) AND NOT c.name IN ['[No Color]', 'Unknown']
      WITH c.name AS color, COUNT(DISTINCT(p.part_num)) AS num_parts
      RETURN {color: color, num_parts: num_parts} as Obj
      ORDER BY num_parts DESC
      """
    )

  setsWithMaxColorPerYear: [maxColorSetsPerYear]
    #SetsWithMaxColorPerYear.js
    @cypher(
      statement: """
      MATCH (ip:InventoryPart)-[:ASSOCIATED_INVENTORY]->(i:Inventory)
      MATCH (ip:InventoryPart)-[:HAS_COLOR]->(c:Color)
      MATCH (i:Inventory)-[:INVENTORY_FOR]->(s:Set)
      WHERE EXISTS (ip.inventory_id) AND NOT c.name IN ['[No Color]', 'Unknown']
      WITH s.year AS year, s.name as set_name, COUNT(DISTINCT(c.name)) AS num_colors
      RETURN {year:year, set_name: set_name, num_colors: num_colors} as Obj
      ORDER BY num_colors DESC
      LIMIT 15
      """
    )

  blackColorSetsTrend: [colorSetsTrend]
    #BlackColorSetsTrend.js
    @cypher(
      statement: """
      MATCH (ip:InventoryPart)-[:ASSOCIATED_INVENTORY]->(i:Inventory)
      MATCH (ip:InventoryPart)-[:HAS_COLOR]->(c:Color)
      MATCH (i:Inventory)-[:INVENTORY_FOR]->(s:Set)
      WHERE EXISTS (ip.inventory_id) AND c.name = 'Black'
      WITH DISTINCT(s.year) AS year, COUNT(DISTINCT(s.name)) AS num_sets
      RETURN {year:year, num_sets:num_sets} as Obj
      ORDER BY year DESC
      """
    )
  whiteColorSetsTrend: [colorSetsTrend]
    #WhiteColorSetsTrend.js
    @cypher(
      statement: """
      MATCH (ip:InventoryPart)-[:ASSOCIATED_INVENTORY]->(i:Inventory)
      MATCH (ip:InventoryPart)-[:HAS_COLOR]->(c:Color)
      MATCH (i:Inventory)-[:INVENTORY_FOR]->(s:Set)
      WHERE EXISTS (ip.inventory_id) AND c.name = 'White'
      WITH DISTINCT(s.year) AS year, COUNT(DISTINCT(s.name)) AS num_sets
      RETURN {year:year, num_sets:num_sets} as Obj
      ORDER BY year DESC
      """
    )
  redColorSetsTrend: [colorSetsTrend]
    #RedColorSetsTrend.js
    @cypher(
      statement: """
      MATCH (ip:InventoryPart)-[:ASSOCIATED_INVENTORY]->(i:Inventory)
      MATCH (ip:InventoryPart)-[:HAS_COLOR]->(c:Color)
      MATCH (i:Inventory)-[:INVENTORY_FOR]->(s:Set)
      WHERE EXISTS (ip.inventory_id) AND c.name = 'Red'
      WITH DISTINCT(s.year) AS year, COUNT(DISTINCT(s.name)) AS num_sets
      RETURN {year:year, num_sets:num_sets} as Obj
      ORDER BY year DESC
      """
    )

  # Load CSV and Add price properties to Set Node

  # LOAD CSV WITH HEADERS FROM 'file:///legosets_price.csv' AS line
  # MATCH (s:Set {set_num:line.Item_Number})
  # SET s.EUR_MSRP=toFloat(line.EUR_MSRP), s.USD_MSRP=toFloat(line.USD_MSRP), s.GBP_MSRP=toFloat(line.GBP_MSRP), s.CAD_MSRP=toFloat(line.CAD_MSRP), s.derived_subtheme=line.Subtheme, s.derived_theme=line.Theme

  #Master Node Creation:

  # MATCH (ip:InventoryPart)-[:ASSOCIATED_INVENTORY]->(i:Inventory)
  # MATCH (ip:InventoryPart)-[:FOR_PART]->(p:Part)
  # MATCH (ip:InventoryPart)-[:HAS_COLOR]->(c:Color)
  # MATCH (p:Part)-[:HAS_PART_CATEGORY]->(pc:PartCategory)
  # MATCH (i:Inventory)-[:INVENTORY_FOR]->(s:Set)
  # MATCH (s:Set)-[:HAS_THEME]->(t:Theme)
  # MATCH (t:Theme)-[:HAS_PARENT_THEME]->(pt:Theme)
  # WHERE EXISTS(s.USD_MSRP)
  # WITH DISTINCT(s.name) AS setname, t.name AS theme, pt.name AS parentTheme, s.year AS year, ip.inventory_id AS inventoryId, s.num_parts AS num_parts, COUNT(DISTINCT(p.part_num)) AS distinct_parts, s.USD_MSRP AS usd_price,s.CAD_MSRP AS cad_price,s.GBP_MSRP AS gbp_price,s.EUR_MSRP AS eur_price, collect(DISTINCT(c.name)) AS colors, collect(DISTINCT(pc.name)) AS part_categories
  # CREATE (c:Master {setname: setname, theme: theme, parentTheme: parentTheme, year: year, inventoryId: inventoryId, num_parts: num_parts, distinct_parts: distinct_parts, usd_price: usd_price,cad_price: cad_price,gbp_price: gbp_price,eur_price: eur_price, colors: colors, part_categories: part_categories})

  #   uniqueSetsPerColorPerYear: [SetsPerColorPerYear]
  #     @cypher(
  #       statement: """
  #       MATCH (ip:InventoryPart)-[:ASSOCIATED_INVENTORY]->(i:Inventory)
  #       MATCH (ip:InventoryPart)-[:HAS_COLOR]->(c:Color)
  #       MATCH (i:Inventory)-[:INVENTORY_FOR]->(s:Set)
  #       WHERE EXISTS (ip.inventory_id) AND  c.name IN ['Black', 'White', 'Yellow', 'Red']
  #       WITH DISTINCT(s.year) AS year, c.name as color, COUNT(DISTINCT(s.name)) AS num_sets
  #       RETURN {year:year, color:color, count:num_sets} as Obj
  #       ORDER BY Obj.year DESC
  #       """
  #     )
}

type setPriceTrend {
  year: String
  USD_average: Float
}

type YearWisePartsAverage {
  year: Int
  average: Float
}

type YearwiseThemeCount {
  year: Int
  themeCount: Int
}

type setPartsPerTheme {
  setname: String
  theme: String
  num_parts: Int
}

type colorSetsTrend {
  year: Int
  num_sets: Int
}

type topThemes {
  name: String
  count: Int
}

type maxColorSetsPerYear {
  year: Int
  set_name: String
  num_colors: Int
}

# type SetsPerColorPerYear {
#   year: Int
#   color: String
#   count: Int
# }

type ThemePrice {
  theme: String
  USD_average: Float
}

type PartsPerColor {
  color: String
  num_parts: Int
}

type Theme {
  _id: Long!
  id: String!
  name: String!
  has_parent_theme: [Theme]
    @relation(name: "HAS_PARENT_THEME", direction: "OUT")
  sets: [Set] @relation(name: "HAS_THEME", direction: "IN")
}

type Set {
  _id: Long!
  CAD_MSRP: Float
  EUR_MSRP: Float
  GBP_MSRP: Float
  USD_MSRP: Float
  derived_subtheme: String
  derived_theme: String
  name: String
  num_parts: Int
  set_num: String
  year: Int
  has_theme: [Theme] @relation(name: "HAS_THEME", direction: "OUT")
  inventorys: [Inventory] @relation(name: "INVENTORY_FOR", direction: "IN")
}

type PartCategory {
  _id: Long!
  id: String!
  name: String!
  parts: [Part] @relation(name: "HAS_PART_CATEGORY", direction: "IN")
}

type Part {
  _id: Long!
  name: String!
  part_num: String!
  has_part_category: [PartCategory]
    @relation(name: "HAS_PART_CATEGORY", direction: "OUT")
  inventoryparts: [InventoryPart] @relation(name: "FOR_PART", direction: "IN")
}

type Color {
  _id: Long!
  id: String!
  is_trans: String!
  name: String!
  rgb: String!
  inventoryparts: [InventoryPart] @relation(name: "HAS_COLOR", direction: "IN")
}

type Inventory {
  _id: Long!
  id: String!
  version: String!
  inventory_for: [Set] @relation(name: "INVENTORY_FOR", direction: "OUT")
  INVENTORY_FOR_rel: [INVENTORY_FOR]
  inventoryparts: [InventoryPart]
    @relation(name: "ASSOCIATED_INVENTORY", direction: "IN")
}

type InventoryPart {
  _id: Long!
  color_id: String!
  inventory_id: String!
  is_spare: String!
  part_num: String!
  quantity: String!
  has_color: [Color] @relation(name: "HAS_COLOR", direction: "OUT")
  for_part: [Part] @relation(name: "FOR_PART", direction: "OUT")
  associated_inventory: [Inventory]
    @relation(name: "ASSOCIATED_INVENTORY", direction: "OUT")
}

type Master {
  _id: Long!
  cad_price: Float
  colors: [String]!
  distinct_parts: Int!
  eur_price: Float
  gbp_price: Float
  inventoryId: String!
  num_parts: Int!
  parentTheme: String!
  part_categories: [String]!
  setname: String!
  theme: String!
  usd_price: Float!
  year: Int!
}

type INVENTORY_FOR @relation(name: "INVENTORY_FOR") {
  from: Inventory!
  to: Set!
  setQuantity: String
}
